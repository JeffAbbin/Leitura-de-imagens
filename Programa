#define INICIO 		0

#define OVERFLOW 	1
#define UNDERFLOW 	2
#define OK			3

#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
typedef struct Pixel {
	unsigned char p; //0 é fundo, 1 é pixel
	unsigned char v; //1 já foi visitado
}tPixel;
typedef struct Pos {
	int x;
	int y;
	struct Pos *ant;
}tPos;
typedef struct Pilha { //salva os pixels na pilha e a posição do topo
	int quant; // quantas posições existem na pilha
	struct Pos *top;
}tPilha;

struct Pilha *criaPilha(int *resultado);
void push(int x, int y, struct Pilha *pilha, int *resultado);
void pop(struct Pilha *pilha, struct Pos *p, int *resultado);

int main()
{
	char id[3];
	int linhas, colunas, maximo;
	int rf, gf, bf;
	int posicao;
	int res;

	tPilha *pilha = criaPilha(&res);
	tPos *pos;
	tPixel **img;

	int i, j;

	//ARQUIVO
	FILE *fp;
	char arq[] = "C:\\Imagens\\02.ppm";
	fp = fopen(arq, "rb");
	if (!fp) {
		fprintf(stderr, "Erro - Não foi possivel abrir o arquivo '%s'.");
		exit(0);
	}    
	
	fscanf(fp, "%s", chave); //chave é o char com 3 posições que será comparado
	if (strcmp(chave, "P6") !=0){    //strcmp faz a comparação de duas strings, a que o programa lê no arquivo e uma "P6"
		printf("Arquivo não é PPM\n");    //irá ler os dois primeiros carcteres e verificará se é P6, se sim, é um arquivo PPM
		fclose(fp);
		return 0;
	}
	
	c = getc(fp);
	while (c == '$')
	{
		while ((c = getc(fp)) != '\n');
	}
	fscanf(fp, "%s", &id);
	fscanf(fp, "%d", &colunas);
	fscanf(fp, "%d", &linhas);
	fscanf(fp, "%d", &maximo);
	fscanf(fp, "%c", &rf);
	printf("Id: %s\n", id);
	printf("Linhas: %d\n", linhas);
	printf("Colunas: %d\n", colunas);
	printf("Maximo: %d\n", maximo);

	pilha = criaPilha(&res); // salvar o resultado da quantidades

	/*alocar a matriz img*/
	img = (tPixel **)calloc(linhas, sizeof(tPixel *));
	for (i = 0; i < linhas; i++) {
		img[i] = (tPixel *)calloc(colunas, sizeof(tPixel));
	}
	/*ler o lo. pixel para o fundo*/
	posicao = ftell(fp);				//ftell para encontrar a posição
	fscanf(fp, "%c%c%c", &rf, &gf, &bf); //fscanf ler o fundo
	fseek(fp, posicao, SEEK_SET);		//fseek para reposicionar
	for (i = 0; i < linhas; i++) {
		for (j = 0; j < colunas; j++) {
			fscanf(fp, "%c%c%c", &r, &g, &b);
			if ((r != rf) || (g != gf) || (b != bf)) {
				img[i][j].p = 1;
				if (j < 200)printf(" "); // onde a cor pixel é diferente fica em branco
			}
			else {
				if (j < 200)printf("*"); // onde a cor pixel é igual fica com asterisco
			}
		} printf("\n");
	}
	fclose(fp); // fecha o arquivo

void push(int x, int y, struct Pilha *pilha, int *resultado) {
	struct Pos *p = (struct Pos *)malloc(sizeof(struct Pos));
	if (p == NULL) *resultado = 0;
	else {
		p->x = x;
		p->y = y;
		if (pilha->top == NULL) {
			p->ant = NULL;
			pilha->top = p;
		}
		else {
			p->ant = pilha->top;
			pilha->top = p;
		}
		pilha->quant++;
		*resultado = OK;
	}
}
void pop(struct Pilha *pilha, struct Pos *p, int *resultado) {
	struct Pos *aux;
	if (pilha->top == NULL) {
		*resultado = UNDERFLOW;
	}
	else {
		aux = pilha->top;
		p->x = aux->x;
		p->y = aux->y;
		pilha->top = aux->ant;
		pilha->quant++;
		free(aux);
	}
}
