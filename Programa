#define OVERFLOW 	1
#define UNDERFLOW 	2
#define OK			3

#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
typedef struct Pixel {
	unsigned char p; //0 é fundo, 1 é pixel
	unsigned char v; //1 já foi visitado
}tPixel;
typedef struct Pos {
	int x;
	int y;
	struct Pos *ant;
}tPos;
typedef struct Pilha { //salva os pixels na pilha e a posição do topo
	int quant; // quantas posições existem na pilha
	struct Pos *top;
}tPilha;

struct Pilha *criaPilha(int *res);
void push(int x, int y, struct Pilha *pilha, int *res);
void pop(struct Pilha *pilha, struct Pos *p, int *res);
void verificaAdjacentes(struct Pixel **img, int i, int j, int linhas, int colunas, struct Pilha *pilha);

int main()
{
	char id[3];
	int linhas, colunas, maximo;
	int rf, gf, bf;
	int posicao;
	int res, cont, pos;
	int c, r, g, b;
	char chave[3];

	tPilha *pilha = criaPilha(&res);
	tPos *pos;
	tPixel **img;

	int i, j;

	//ARQUIVO
	FILE *fp;
	char arq[] = "C:\\Imagens\\02.ppm";
	fp = fopen(arq, "rb");
	if (!fp) {
		fprintf(stderr, "Erro - Não foi possivel abrir o arquivo '%s'.");
		exit(0);
	}

	c = getc(fp);
	while (c == '$')
	{
		while ((c = getc(fp)) != '\n');
	}
	fscanf(fp, "%s", &id);
	fscanf(fp, "%d", &colunas);
	fscanf(fp, "%d", &linhas);
	fscanf(fp, "%d", &maximo);
	fscanf(fp, "%c", &rf);
	printf("Id: %s\n", id);
	printf("Linhas: %d\n", linhas);
	printf("Colunas: %d\n", colunas);
	printf("Maximo: %d\n", maximo);

	pilha = criaPilha(&res); // salvar o resultado da quantidades

							 /*alocar a matriz img*/
	img = (tPixel **)calloc(linhas, sizeof(tPixel *));
	for (i = 0; i < linhas; i++) {
		img[i] = (tPixel *)calloc(colunas, sizeof(tPixel));
	}
	/*ler o lo. pixel para o fundo*/
	posicao = ftell(fp);				//ftell para encontrar a posição
	fscanf(fp, "%c%c%c", &rf, &gf, &bf); //fscanf ler o fundo
	fseek(fp, posicao, SEEK_SET);		//fseek para reposicionar
	for (i = 0; i < linhas; i++) {
		for (j = 0; j < colunas; j++) {
			fscanf(fp, "%c%c%c", &r, &g, &b);
			if ((r != rf) || (g != gf) || (b != bf)) {
				img[i][j].p = 1;
				if (j < 200)printf(" "); // onde a cor pixel é diferente fica em branco
			}
			else {
				if (j < 200)printf("*"); // onde a cor pixel é igual fica com asterisco
			}
		} printf("\n");
	}
	fclose(fp); // fecha o arquivo

	for (i = 0; i < linhas; i++) {
		for (j = 0; j < colunas; j++) {
			if ((img[i][j].p == 1) && (img[i][j].v == 0)) {
				verificaAdjacentes(img, i, j, linhas, colunas, pilha);
				while (pilha->quant > 0) {
					pop(pilha, pos, &res);
					verificaAdjacentes(img, pos.x, pos.y, linhas, colunas, pilha);
				}
				cont++;
			}
		}
	}
	printf("\n ");
	printf("%d \n", c);
	printf("\n @@@@@@@@@ A imagem possui %d objetos @@@@@@@@@", cont);

}
	void push(int x, int y, struct Pilha *pilha, int *res) {
		struct Pos *p = (struct Pos *)malloc(sizeof(struct Pos));
		if (p == NULL) *res = 0;
		else {
			p->x = x;
			p->y = y;
			if (pilha->top == NULL) {
				p->ant = NULL;
				pilha->top = p;
			}
			else {
				p->ant = pilha->top;
				pilha->top = p;
			}
			pilha->quant++;
			*res = OK;
		}
	}
	void pop(struct Pilha *pilha, struct Pos *p, int *res) {
		struct Pos *aux;
		if (pilha->top == NULL) {
			*res = UNDERFLOW;
		}
		else {
			aux = pilha->top;
			p->x = aux->x;
			p->y = aux->y;
			pilha->top = aux->ant;
			pilha->quant++;
			free(aux);
		}
	}
	void verificaAdjacentes(struct Pixel **img, int i, int j, int linhas, int colunas, struct Pilha *pilha) {
		int res;
		img[i][j].v = 1;

		if (j > 0)
			if ((img[i][j - 1].p == 1) && (img[i][j - 1].v == 0)) {
				push(i, j - 1, pilha, &res);
				img[i][j - 1].v == 1;
			}
		if (i > 0)
			if ((img[i - 1][j].p == 1) && (img[i - 1][j].v == 0)) {
				push(i - 1, j, pilha, &res);
				img[i - 1][j].v == 1;
			}
		if (i < linhas - 1)
			if ((img[i + 1][j].p == 1) && (img[i + 1][j].v == 0)) {
				push(i + 1, j, pilha, &res);
				img[i + 1][j].v == 1;
			}
		if (j < colunas - 1)
			if ((img[i][j + 1].p == 1) && (img[i][j + 1].v == 0)) {
				push(i, j + 1, pilha, &res);
				img[i][j + 1].v == 1;
			}
	}
